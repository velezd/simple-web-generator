import base64
import os

# image data
img_horizontal = b'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cNJJqalT0+66K23atO4i8732Srvrru7/qjv55JHF1eLFyQEHpD32WNrUqUPfB2uUzp+99kr19aWdf37apEn97oOVQw5JW7w4bZ990saPT5syJe1jH0v23df7ARBYwPprm2yS3HFHd2PPbbdNjR3b3Xzz859P7rwzbc1K0HA9+WTasmX/tfO3yZOTK6/sbiC68cb9HzzttNTJJ6d23LG7Uenuu6cuvNAKFjDwd0klA6/uXMcLPgEA1NTA6z2tYAEAbGACCwBAYAEACCwAAIEFAIDAAgAQWAAAAgsAAIEFACCwAAAEFgAAAgsAQGABAAgsAACBBQCAwAIAEFgAAAILAACBBQAgsAAABBYAAAILAEBgAQAILAAABBYAgMACABBYAAACCwAAgQUAILAAAAQWAAACCwBAYAEACCwAAAQWAIDAAgAQWAAACCwAAIEFACCwAAAEFgAAAgsAQGABAAgsAAAEFgCAwAIAEFgAAAgsAACBBQAgsAAAEFgAAAILAEBgAQAILAAABBYAgMACABBYAAAILAAAgQUAILAAABBYAAACCwBAYAEACCwAAAQWAIDAAgAQWAAACCwAAIEFACCwAAAQWAAAAgsAQGABACCwAAAEFgCAwAIAEFgAAAgsAACBBQAgsAAAEFgAAAILAEBgAQAgsAAABBYAgMACAEBgAQAILAAAgQUAILAAABBYAAACCwBAYAEAILAAAAQWAIDAAgBAYAEACCwAAIEFAIDAAgAQWAAAAgsAQGABACCwAAAEFgCAwAIAQGABAAgsAACBBQCAwAIAEFgAAAILAEBgAQAgsAAABBYAgMACAEBgAQAILAAAgQUAgMACABBYAAACCwAAgQUAILAAAAQWAIDAAgBAYAEACCwAAIEFAIDAAgAQWAAAAgsAAIEFACCwAAAEFgAAAgsAQGABAAgsAACBBQCAwAIAEFgAAAILAACBBQAgsAAABBYAAAILAEBgAQAILAAABBYAgMACABBYAAACCwAAgQUAILAAAAQWAAACCwBAYAEACCwAAAQWAIDAAgAQWAAAAgsAAIEFACCwAAAEFgAAAgsAQGABAAgsAAAEFgCAwAIAEFgAAAgsAACBBQAgsAAABBYAAAILAEBgAQAILAAABBYAgMACABBYAAAILAAAgQUAILAAABBYAAACCwBAYAEACCwAAAQWAIDAAgAQWAAACCwAAIEFACCwAAAYUqukvAwAABuOFSwAAIEFACCwAAAEFgAAI/f//KstjUhRT+wAAAAASUVORK5CYII='
img_vertical = b'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'
img_square = b'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fuyE7yH8LSH/0tF1dMZkTB7sHnQw+C/Hyd8SAkOYYAGCBfD/f5toDQsYlHGyhgW4JQQQLADBAgQLQLAABAsQLADBAgQLQLAABAsQLADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECECxAsAAEC0CwAMECECwAwQIEC0CwAMFyCADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECECxAsAAEC0CwAMECECwAwQIEC0CwAAQLECwAwQIQLECwAAQLECwAwQIQLECwAAQLQLAAwQIQLADBAgQLQLAABAsQLADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECECxAsAAECxAsAMECECxAsAAEC0CwAMECECwAwQIEC0CwAAQLECwAwQIQLECwAAQLQLAAwQIQLADBAgQLQLAABAsQLADBAhAsQLAABAsQLADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECECxAsAAEC0CwAMECECwAwQIEC0CwAAQLECwAwQIQLECwAAQLECwAwQIQLECwAAQLQLAAwQIQLADBAoa/LpVyGABXWACCBQgWgGABvHH/A0xO/zZUMr3XAAAAAElFTkSuQmCC'


# read image - not used
def read_image(path):
    with open(path, 'rb') as file:
        return base64.b64encode(file.read())


# write image
def write_image(path, image):
    with open(path, 'wb') as file:
        file.write(base64.b64decode(image))


def test_images():
    # save test images
    image_path = '../src/images/test_horizontal.png'
    if not os.path.exists(image_path):
        write_image(image_path, img_horizontal)
    image_path = '../src/images/test_vertical.png'
    if not os.path.exists(image_path):
        write_image(image_path, img_vertical)
    image_path = '../src/images/test_square.png'
    if not os.path.exists(image_path):
        write_image(image_path, img_square)

    html = '''@header_image:test_horizontal.png
@name:Images test
<p>This is test of all image types and combinations.</p>
<p>Gallery test - 3 images</p>

@image:test_vertical.png:Vertical image
@image:test_horizontal.png
@image:test_square.png

<p>Big image test</p>

@bigimage:test_horizontal.png:Caption test
@bigimage:test_vertical.png
@bigimage:test_square.png

<p>Medium image test</p>

@medimage:test_horizontal.png:Caption test
@medimage:test_vertical.png:another test caption
@medimage:test_square.png

<p>Big gallery test</p>

@image:test_vertical.png:Vertical image
@image:test_horizontal.png
@image:test_square.png
@image:test_square.png
@image:test_vertical.png:Vertical image
@image:test_vertical.png:Vertical image
@image:test_horizontal.png
@image:test_horizontal.png
@image:test_square.png:Test caption
@image:test_square.png
@image:test_vertical.png:Vertical image
@image:test_vertical.png:Vertical image
@image:test_horizontal.png
@image:test_horizontal.png
@image:test_square.png:Test caption

'''



    # save test page
    if os.path.exists('../src/pages'):
        if not os.path.exists('../src/pages/110-images'):
            os.mkdir('../src/pages/110-images')

        with open('../src/pages/110-images/index.html', 'w') as file:
            file.write(html)


if __name__ == '__main__':
    test_images()
